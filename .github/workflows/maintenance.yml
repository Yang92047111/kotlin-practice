name: Maintenance

on:
  schedule:
    # Run weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch:
    inputs:
      update_dependencies:
        description: 'Update dependencies'
        required: false
        default: true
        type: boolean
      cleanup_artifacts:
        description: 'Cleanup old artifacts'
        required: false
        default: true
        type: boolean

env:
  JAVA_VERSION: '17'

jobs:
  dependency-updates:
    name: Check and Update Dependencies
    runs-on: ubuntu-latest
    if: github.event.inputs.update_dependencies != 'false'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Check for dependency updates
      run: |
        echo "=== Checking for Dependency Updates ==="
        
        # Check for dependency updates
        mvn versions:display-dependency-updates -DoutputFile=dependency-updates.txt
        mvn versions:display-plugin-updates -DoutputFile=plugin-updates.txt
        
        # Check for property updates
        mvn versions:display-property-updates -DoutputFile=property-updates.txt

    - name: Generate update report
      run: |
        echo "# Dependency Update Report - $(date)" > UPDATE_REPORT.md
        echo "" >> UPDATE_REPORT.md
        
        if grep -q "The following dependencies" dependency-updates.txt; then
          echo "## 📦 Dependency Updates Available" >> UPDATE_REPORT.md
          echo "" >> UPDATE_REPORT.md
          echo "\`\`\`" >> UPDATE_REPORT.md
          grep -A 20 "The following dependencies" dependency-updates.txt >> UPDATE_REPORT.md
          echo "\`\`\`" >> UPDATE_REPORT.md
          echo "" >> UPDATE_REPORT.md
        fi
        
        if grep -q "The following plugin updates" plugin-updates.txt; then
          echo "## 🔧 Plugin Updates Available" >> UPDATE_REPORT.md
          echo "" >> UPDATE_REPORT.md
          echo "\`\`\`" >> UPDATE_REPORT.md
          grep -A 20 "The following plugin updates" plugin-updates.txt >> UPDATE_REPORT.md
          echo "\`\`\`" >> UPDATE_REPORT.md
          echo "" >> UPDATE_REPORT.md
        fi
        
        echo "## 🔍 How to Update" >> UPDATE_REPORT.md
        echo "" >> UPDATE_REPORT.md
        echo "1. Review the updates above" >> UPDATE_REPORT.md
        echo "2. Update versions in the respective \`pom.xml\` files" >> UPDATE_REPORT.md
        echo "3. Run \`make test\` to ensure compatibility" >> UPDATE_REPORT.md
        echo "4. Commit and create a PR" >> UPDATE_REPORT.md

    - name: Upload update reports
      uses: actions/upload-artifact@v4
      with:
        name: dependency-update-report-${{ github.run_number }}
        path: |
          UPDATE_REPORT.md
          dependency-updates.txt
          plugin-updates.txt
          property-updates.txt
        retention-days: 30

    - name: Create dependency update issue
      if: github.event_name == 'schedule'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let updateReport = '';
          try {
            updateReport = fs.readFileSync('UPDATE_REPORT.md', 'utf8');
          } catch (error) {
            console.log('Could not read update report:', error);
            return;
          }
          
          // Check if there are actual updates
          const hasUpdates = updateReport.includes('Updates Available');
          
          if (hasUpdates) {
            // Close existing dependency update issues
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'dependencies,automated',
              state: 'open'
            });
            
            for (const issue of existingIssues.data) {
              if (issue.title.includes('Dependency Updates Available')) {
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed'
                });
              }
            }
            
            // Create new issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `📦 Dependency Updates Available - ${new Date().toISOString().split('T')[0]}`,
              body: updateReport + `
              
              ---
              
              **Automated Maintenance**: This issue was created automatically by the maintenance workflow.
              Previous dependency update issues have been automatically closed.`,
              labels: ['dependencies', 'maintenance', 'automated']
            });
          }

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run security audit
      run: |
        echo "=== Security Audit ==="
        
        # OWASP Dependency Check
        mvn org.owasp:dependency-check-maven:check -Dformat=ALL -DfailBuildOnCVSS=7
        
        # Maven audit
        mvn org.sonatype.ossindex.maven:ossindex-maven-plugin:audit

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-audit-${{ github.run_number }}
        path: |
          **/target/dependency-check-report.*
        retention-days: 30

    - name: Create security issue on high vulnerabilities
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `🚨 Security Vulnerabilities Detected - ${new Date().toISOString().split('T')[0]}`,
            body: `## Security Audit Alert
            
            High-severity security vulnerabilities have been detected in project dependencies.
            
            ### Action Required:
            1. Download the security audit report from the workflow artifacts
            2. Review all identified vulnerabilities
            3. Update affected dependencies immediately
            4. Re-run security audit to verify fixes
            
            ### Workflow Details:
            - **Run ID**: ${context.runId}
            - **Commit**: ${context.sha}
            - **Report**: Available in workflow artifacts
            
            **Priority**: HIGH - Address immediately`,
            labels: ['security', 'high-priority', 'automated']
          });

  code-quality-check:
    name: Code Quality Maintenance
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run code quality checks
      run: |
        echo "=== Code Quality Maintenance ==="
        
        # Build and run basic quality checks
        make build
        make lint
        
        # Check for unused dependencies
        mvn dependency:analyze > dependency-analysis.txt || true
        
        # Generate dependency tree
        mvn dependency:tree > dependency-tree.txt

    - name: Analyze code metrics
      run: |
        echo "=== Code Metrics Analysis ==="
        
        # Count lines of code
        find . -name "*.kt" -not -path "*/target/*" | xargs wc -l > kotlin-loc.txt
        find . -name "*.java" -not -path "*/target/*" | xargs wc -l > java-loc.txt || echo "No Java files found" > java-loc.txt
        
        # Count test files
        find . -name "*Test.kt" -not -path "*/target/*" | wc -l > test-count.txt
        
        # Generate metrics report
        echo "# Code Quality Report - $(date)" > QUALITY_REPORT.md
        echo "" >> QUALITY_REPORT.md
        echo "## 📊 Code Metrics" >> QUALITY_REPORT.md
        echo "" >> QUALITY_REPORT.md
        echo "- **Kotlin Files**: $(find . -name "*.kt" -not -path "*/target/*" | wc -l)" >> QUALITY_REPORT.md
        echo "- **Test Files**: $(cat test-count.txt)" >> QUALITY_REPORT.md
        echo "- **Total Kotlin LOC**: $(tail -n 1 kotlin-loc.txt | awk '{print $1}')" >> QUALITY_REPORT.md

    - name: Upload quality reports
      uses: actions/upload-artifact@v4
      with:
        name: code-quality-report-${{ github.run_number }}
        path: |
          QUALITY_REPORT.md
          dependency-analysis.txt
          dependency-tree.txt
          *-loc.txt
          test-count.txt
        retention-days: 30

  cleanup-artifacts:
    name: Cleanup Old Artifacts
    runs-on: ubuntu-latest
    if: github.event.inputs.cleanup_artifacts != 'false'

    steps:
    - name: Delete old workflow artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const artifacts = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          const cutoffDate = new Date();
          cutoffDate.setDate(cutoffDate.getDate() - 30); // Keep artifacts for 30 days
          
          let deletedCount = 0;
          
          for (const artifact of artifacts.data.artifacts) {
            const createdAt = new Date(artifact.created_at);
            if (createdAt < cutoffDate) {
              console.log(`Deleting artifact: ${artifact.name} (${artifact.created_at})`);
              try {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
                deletedCount++;
              } catch (error) {
                console.log(`Failed to delete artifact ${artifact.name}: ${error.message}`);
              }
            }
          }
          
          console.log(`Deleted ${deletedCount} old artifacts`);

  maintenance-summary:
    name: Maintenance Summary
    runs-on: ubuntu-latest
    needs: [dependency-updates, security-audit, code-quality-check, cleanup-artifacts]
    if: always()

    steps:
    - name: Create maintenance summary
      run: |
        echo "## 🔧 Weekly Maintenance Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Date**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Tasks Completed:" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Dependency update check" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Security audit" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Code quality analysis" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Artifact cleanup" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "- Review any created issues for dependency updates" >> $GITHUB_STEP_SUMMARY
        echo "- Address any security vulnerabilities" >> $GITHUB_STEP_SUMMARY
        echo "- Check maintenance reports in workflow artifacts" >> $GITHUB_STEP_SUMMARY