name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

env:
  JAVA_VERSION: '17'

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Validate release readiness
      run: |
        echo "=== Release Validation ==="
        echo "Tag/Version: ${{ github.ref_name || github.event.inputs.version }}"
        echo "Commit: ${{ github.sha }}"
        
        # Run full CI pipeline
        make ci
        
        # Additional release checks
        echo "Running release-specific validations..."
        make health

    - name: Generate changelog
      run: |
        echo "# Changelog for ${{ github.ref_name || github.event.inputs.version }}" > RELEASE_CHANGELOG.md
        echo "" >> RELEASE_CHANGELOG.md
        echo "## What's New" >> RELEASE_CHANGELOG.md
        echo "" >> RELEASE_CHANGELOG.md
        
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          echo "### Changes since $LAST_TAG:" >> RELEASE_CHANGELOG.md
          git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD >> RELEASE_CHANGELOG.md
        else
          echo "### Initial Release" >> RELEASE_CHANGELOG.md
          echo "- First release of Kotlin Practice Projects" >> RELEASE_CHANGELOG.md
        fi
        
        echo "" >> RELEASE_CHANGELOG.md
        echo "## Modules Included" >> RELEASE_CHANGELOG.md
        echo "- **withcontext-coroutines**: Kotlin Coroutines demonstration" >> RELEASE_CHANGELOG.md
        echo "- **OracleTrigger**: Oracle Database CRUD API with triggers" >> RELEASE_CHANGELOG.md
        echo "- **Testcontainers**: Spring Boot Notes API with Testcontainers" >> RELEASE_CHANGELOG.md

    - name: Upload changelog
      uses: actions/upload-artifact@v4
      with:
        name: release-changelog
        path: RELEASE_CHANGELOG.md
        retention-days: 30

  build-release-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: validate-release

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build release artifacts
      run: |
        echo "Building release artifacts..."
        make package
        
        # Create distribution directory
        mkdir -p dist
        
        # Copy all JAR files
        find . -name "*.jar" -not -path "*/target/maven-*" -not -name "*-sources.jar" -not -name "*-javadoc.jar" -exec cp {} dist/ \;
        
        # Create README for distribution
        cat > dist/README.txt << EOF
        Kotlin Practice Projects - Release ${{ github.ref_name || github.event.inputs.version }}
        
        This distribution contains the following modules:
        
        1. withcontext-coroutines-*.jar
           - Kotlin Coroutines demonstration with withContext
           - Run with: java -cp withcontext-coroutines-*.jar WithContextDemoKt
        
        2. OracleTrigger-*.jar
           - Oracle Database CRUD API with Spring Boot
           - Requires Oracle Database configuration
        
        3. Testcontainers-*.jar
           - Spring Boot Notes API with Testcontainers integration
           - Includes Docker-based testing capabilities
        
        Requirements:
        - Java 17 or higher
        - Maven 3.8+ (for building from source)
        - Docker (for Testcontainers module)
        - Oracle Database (for OracleTrigger module)
        
        For more information, visit: https://github.com/${{ github.repository }}
        EOF

    - name: Create archive
      run: |
        cd dist
        tar -czf ../kotlin-practice-${{ github.ref_name || github.event.inputs.version }}.tar.gz *
        cd ..
        zip -r kotlin-practice-${{ github.ref_name || github.event.inputs.version }}.zip dist/*

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts
        path: |
          kotlin-practice-*.tar.gz
          kotlin-practice-*.zip
          dist/
        retention-days: 90

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-release-artifacts]
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download changelog
      uses: actions/download-artifact@v4
      with:
        name: release-changelog

    - name: Download release artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-artifacts

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name || github.event.inputs.version }}
        name: Release ${{ github.ref_name || github.event.inputs.version }}
        body_path: RELEASE_CHANGELOG.md
        prerelease: ${{ github.event.inputs.prerelease || false }}
        files: |
          kotlin-practice-*.tar.gz
          kotlin-practice-*.zip
        generate_release_notes: true

    - name: Update release summary
      run: |
        echo "## ðŸš€ Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version**: ${{ github.ref_name || github.event.inputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Artifacts**: Available in GitHub Releases" >> $GITHUB_STEP_SUMMARY
        echo "**Status**: âœ… All checks passed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Download Links" >> $GITHUB_STEP_SUMMARY
        echo "- [Source Code (tar.gz)](https://github.com/${{ github.repository }}/archive/${{ github.ref_name || github.event.inputs.version }}.tar.gz)" >> $GITHUB_STEP_SUMMARY
        echo "- [Source Code (zip)](https://github.com/${{ github.repository }}/archive/${{ github.ref_name || github.event.inputs.version }}.zip)" >> $GITHUB_STEP_SUMMARY

  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: create-github-release

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create post-release issue
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `ðŸ“‹ Post-Release Tasks for ${{ github.ref_name || github.event.inputs.version }}`,
            body: `## Post-Release Checklist
            
            Release ${{ github.ref_name || github.event.inputs.version }} has been created successfully! ðŸŽ‰
            
            ### Manual Tasks to Complete:
            - [ ] Update documentation if needed
            - [ ] Announce release in relevant channels
            - [ ] Update project README with new version info
            - [ ] Consider updating dependency versions
            - [ ] Plan next release milestones
            
            ### Release Information:
            - **Tag**: ${{ github.ref_name || github.event.inputs.version }}
            - **Commit**: ${{ github.sha }}
            - **Release URL**: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name || github.event.inputs.version }}
            
            This issue can be closed once all post-release tasks are completed.`,
            labels: ['release', 'task-list'],
            assignees: ['${{ github.actor }}']
          });

    - name: Notify success
      run: |
        echo "ðŸŽ‰ Release ${{ github.ref_name || github.event.inputs.version }} completed successfully!"
        echo "All artifacts have been uploaded and the release is now available."